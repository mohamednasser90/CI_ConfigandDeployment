# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3
# Orchestrate or schedule a set of jobs


jobs:
    
  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file ./template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}" \
              --tags project=udacity \              
              --region us-east-1
      # - run : 
      #     name: save Ec2 IP to inventory file
      #     command: |
      #       aws ec2 describe-instances \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \                  
      #         --output text >> ./inventory.txt  \
      #         --region us-east-1   

  get_instance_ip: 
    docker:
      - image: amazon/aws-cli
    steps:     
      - run : 
          name: save Ec2 IP to inventory file
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udacity" \                           
              --output text >> ./inventory.txt  \
              --region us-east-1   
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              # --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=udacity-${CIRCLE_WORKFLOW_ID:0:5}" \
            --output text >> ./inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt                  
  # create_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file ./template.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1
    # Exercise: Config and Deployment 54.236.42.43
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["f9:0f:73:86:1e:3a:48:58:bd:78:6b:15:d6:5a:6e:3e"] 
     
                  
      - run:
          name: Install Ansible
          command: |
             apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
             ansible-playbook -i ./inventory.txt ./main.yml

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      # - destroy_environment                 
#aws cloudformation delete-stack --stack-name 
workflows:
  # Name the workflow "welcome"
  my_workflow:
    # Run the welcome/run job in its own container
    jobs:      
      - create_infrastructure:
          filters:
            branches:
              only:
                - master
      - get_instance_ip:
          requires:
            - create_infrastructure          
      - configure_infrastructure :
          requires:
            - create_infrastructure
            - get_instance_ip
      - smoke_test      
      